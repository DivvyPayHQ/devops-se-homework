// Code generated by protoc-gen-go. DO NOT EDIT.
// source: planet_express_service.proto

package planetexpress

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("planet_express_service.proto", fileDescriptor_0e9722ed70d82000)
}

var fileDescriptor_0e9722ed70d82000 = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x29, 0xc8, 0x49, 0xcc,
	0x4b, 0x2d, 0x89, 0x4f, 0xad, 0x28, 0x28, 0x4a, 0x2d, 0x2e, 0x8e, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb,
	0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x85, 0xc8, 0x42, 0x25, 0xa5, 0xb8,
	0x8a, 0x33, 0x32, 0x0b, 0x20, 0x52, 0x52, 0xd2, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x60,
	0x5e, 0x52, 0x69, 0x9a, 0x7e, 0x6a, 0x6e, 0x41, 0x49, 0x25, 0x44, 0xd2, 0x28, 0x84, 0x8b, 0x37,
	0x00, 0xac, 0xd3, 0x15, 0xa2, 0x53, 0xc8, 0x99, 0x8b, 0xdd, 0x3d, 0xb5, 0x24, 0x38, 0x23, 0xb3,
	0x40, 0x48, 0x4c, 0x0f, 0xa2, 0x53, 0x0f, 0xa6, 0x53, 0xcf, 0x15, 0xa4, 0x53, 0x4a, 0x4e, 0x0f,
	0xc5, 0x32, 0x3d, 0xa8, 0xfa, 0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x25, 0x06, 0x27,
	0xe1, 0x28, 0xc1, 0x82, 0xec, 0x74, 0x7d, 0x14, 0x65, 0x49, 0x6c, 0x60, 0x63, 0x8c, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x85, 0x0e, 0xa9, 0xcd, 0xc9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PlanetExpressClient is the client API for PlanetExpress service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlanetExpressClient interface {
	GetShip(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetShipResponse, error)
}

type planetExpressClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanetExpressClient(cc grpc.ClientConnInterface) PlanetExpressClient {
	return &planetExpressClient{cc}
}

func (c *planetExpressClient) GetShip(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetShipResponse, error) {
	out := new(GetShipResponse)
	err := c.cc.Invoke(ctx, "/planetexpress.PlanetExpress/GetShip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanetExpressServer is the server API for PlanetExpress service.
type PlanetExpressServer interface {
	GetShip(context.Context, *empty.Empty) (*GetShipResponse, error)
}

// UnimplementedPlanetExpressServer can be embedded to have forward compatible implementations.
type UnimplementedPlanetExpressServer struct {
}

func (*UnimplementedPlanetExpressServer) GetShip(ctx context.Context, req *empty.Empty) (*GetShipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShip not implemented")
}

func RegisterPlanetExpressServer(s *grpc.Server, srv PlanetExpressServer) {
	s.RegisterService(&_PlanetExpress_serviceDesc, srv)
}

func _PlanetExpress_GetShip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanetExpressServer).GetShip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/planetexpress.PlanetExpress/GetShip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanetExpressServer).GetShip(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlanetExpress_serviceDesc = grpc.ServiceDesc{
	ServiceName: "planetexpress.PlanetExpress",
	HandlerType: (*PlanetExpressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShip",
			Handler:    _PlanetExpress_GetShip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "planet_express_service.proto",
}
